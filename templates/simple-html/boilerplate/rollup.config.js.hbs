import copy from '@barusu/rollup-plugin-copy'
import { empty } from '@barusu/template-simple-html'
import { coverString, coverBoolean } from '@barusu/util-option'
import json from '@rollup/plugin-json'
import nodeResolve from '@rollup/plugin-node-resolve'
import autoprefixer from 'autoprefixer'
import { bold, yellow } from 'colorette'
import globby from 'globby'
import path from 'path'
import postcssFlexbugsFixes from 'postcss-flexbugs-fixes'
import pug from 'pug'
import postcss from 'rollup-plugin-postcss'
import manifest from './package.json'


/**
 * 环境变量
 */
const env = (() => {
  const nodeEnv = coverString('development', process.env.NODE_ENV).toLowerCase()
  const isEnvDevelopment = nodeEnv === 'development'
  const isEnvProduction = nodeEnv === 'production'

  return {
    isEnvDevelopment,
    isEnvProduction,
    shouldUseSourceMap: coverBoolean(true, process.env.SHOULD_USE_SOURCEMAP),
  }
})()


/**
 * 路径变量
 */
const paths = (() => {
  const resolvePath = (...p) => path.resolve(...p)
  const resolveSrcPath = (...p) => resolvePath('src/', ...p)
  const resolveDstPath = (...p) => resolvePath('dist/', ...p)

  // _shared files
  const resolveSrcSharedPath = (...p) => resolveSrcPath('_shared/', ...p)
  const resolveDstSharedPath = (...p) => resolveDstPath('_shared/', ...p)
  const createSharedPaths = () => ({
    srcRoot: resolveSrcSharedPath(),
    dstRoot: resolveDstSharedPath(),
    styles: [
      {
        src: resolveSrcSharedPath('style/main.styl'),
        dest: resolveDstSharedPath('style/main.css'),
      },
    ],
    scripts: [
      {
        src: resolveSrcSharedPath('script/main.js'),
        dest: resolveDstSharedPath('script/main.js'),
      },
    ],
    resources: [
      {
        src: [
          resolveSrcSharedPath('resource/*'),
        ],
        dest: resolveDstSharedPath('resource/'),
      },
    ],
    thirdPartyStyles: [
      {
        src: [
          resolveSrcSharedPath('style/third-party/**/*.css'),
        ],
        dest: resolveDstSharedPath('style/third-party/'),
      },
    ],
    thirdPartyScripts: [
      {
        src: [
          resolveSrcSharedPath('script/third-party/**/*.js'),
        ],
        dest: resolveDstSharedPath('script/third-party/'),
      },
    ],
  })

  // page files
  const createPagePaths = ({ name, srcPath, dstPath }) => ({
    name,
    html: {
      src: resolveSrcPath(srcPath, 'index.pug'),
      dest: resolveDstPath(dstPath, 'index.html'),
    },
    styles: [
      {
        src: resolveSrcPath(srcPath, 'style/main.styl'),
        dest: resolveDstPath(dstPath, 'style/main.css'),
      },
    ],
    scripts: [
      {
        src: resolveSrcPath(srcPath, 'script/main.js'),
        dest: resolveDstPath(dstPath, 'script/main.js'),
      },
    ],
    resources: [
      {
        src: [
          resolveSrcPath(srcPath, 'resource/*'),
        ],
        dest: resolveDstPath(dstPath, 'resource/'),
      },
    ],
    thirdPartyStyles: [
      {
        src: [
          resolveSrcPath(srcPath, 'style/third-party/**/*.css'),
        ],
        dest: resolveDstPath(dstPath, 'style/third-party/'),
      },
    ],
    thirdPartyScripts: [
      {
        src: [
          resolveSrcPath(srcPath, 'script/third-party/**/*.js'),
        ],
        dest: resolveDstPath(dstPath, 'script/third-party/'),
      },
    ],
  })

  const pages = [
    { name: '{{{titleCase defaultPage.name}}}', srcPath: '{{{defaultPage.path}}}', dstPath: '{{{defaultPage.path}}}' }
  ]
    .filter(Boolean)
    .filter((item, index, arr) => {
      // duplicated path is not allowed
      const existedOne = arr.find((x, i) => {
        if (i >= index) return undefined
        if (x.srcPath !== item.srcPath || x.dstPath !== item.dstPath) return undefined
        return x
      })
      if (existedOne != null) {
        console.log(
          bold(yellow('[warning]'))
          + yellow(` find duplicated item with srcPath(${ item.srcPath }), dstPath(${ item.dstPath }). skipped.`))
        return false
      }
      return true
    })

  const result = {
    emptyBundlePath: resolvePath('.empty.__tmp__.js'),
    srcRoot: resolveSrcPath(),
    dstRoot: resolveDstPath(),
    _shared: createSharedPaths(),
    pages: [
      // index page
      pages.length > 0 && {
        ...createPagePaths(pages[0]),
        html: createPagePaths({ ...pages[0], dstPath: '' }).html,
      },

      // pages
      ...pages.map(createPagePaths),
    ].filter(Boolean),
  }

  return result
})()


// transpile (*.styl|*.sass|*.scss) ==> *.css
const styleConfigs = [
  ...paths._shared.styles,
  ...paths.pages.map(page => page.styles).flat(1),
]
  .map(({ src, dest }) => ({
    input: src,
    output: {
      file: paths.emptyBundlePath,
    },
    plugins: [
      nodeResolve({
        browser: true,
        preferBuiltins: false,
      }),
      postcss({
        extract: dest,
        minimize: false,
        modules: false,
        plugins: [
          postcssFlexbugsFixes({}),
          autoprefixer({})
        ],
      }),
    ]
  }))


// transpile js
const scriptConfigs = [
  ...paths._shared.scripts,
  ...paths.pages.map(page => page.scripts).flat(1),
]
  .map(({ src, dest }) => ({
    inlineDynamicImports: true,
    input: src,
    output: {
      format: 'iife',
      file: dest,
      sourcemap: env.shouldUseSourceMap,
    },
    plugins: [
      nodeResolve({
        browser: true,
        preferBuiltins: false,
      }),
      json({
        indent: '  ',
        namedExports: true,
      })
    ]
  }))


const resourceConfig = {
  output: {
    file: paths.emptyBundlePath,
  },
  plugins: [
    empty(),
    copy({
      copyOnce: false,
      verbose: true,
      targets: [
        //- copy resources
        ...paths._shared.resources,
        ...paths.pages.map(page => page.resources).flat(1),

        //- copy styles
        ...paths._shared.thirdPartyStyles,
        ...paths.pages.map(page => page.thirdPartyStyles).flat(1),

        //- copy scripts
        ...paths._shared.thirdPartyScripts,
        ...paths.pages.map(page => page.thirdPartyScripts).flat(1),

        //- transpile pug
        ...(
          paths.pages.map(page => {
            const { dir: destDir, base: destFileName } = path.parse(page.html.dest)
            const collectDependenceTargets = async (item) => {
              const { src, dest, flatten = true, ...options } = item
              const sources = await globby(item.src, options)

              const destinations = Array.isArray(dest) ? dest : [dest]
              return destinations
                .map(destination => (
                  sources.map(srcFilePath => {
                    const { base, dir } = path.parse(srcFilePath)
                    const destinationFolder = (flatten || (!flatten && !dir))
                      ? destination
                      : dir.replace(dir.split(/[\\\/]/)[0], destination)
                    const destFilePath = path.join(destinationFolder, base)
                    return destFilePath
                  })
                ))
                .flat(1)
            }

            return {
              src: page.html.src,
              dest: destDir,
              rename: destFileName,
              transform: async (content, srcPath, dstPath) => {
                const baseDestPath = path.dirname(dstPath)
                const calcRelativePath = (filePath) => {
                  const p = path.relative(baseDestPath, filePath)
                  if (/^[.]/.test(p)) return p
                  return './' + p
                }

                const sharedThirdPartyStyles = (
                  await Promise.all(paths._shared.thirdPartyStyles
                    .map(item => collectDependenceTargets(item, baseDestPath)))
                ).flat(1).map(calcRelativePath)
                const sharedThirdPartyScripts = (
                  await Promise.all(paths._shared.thirdPartyScripts
                    .map(item => collectDependenceTargets(item, baseDestPath)))
                ).flat(1).map(calcRelativePath)

                const thirdPartyStyles = (
                  await Promise.all(page.thirdPartyStyles
                    .map(item => collectDependenceTargets(item, dstPath)))
                ).flat(1).map(calcRelativePath)
                const thirdPartyScripts = (
                  await Promise.all(page.thirdPartyScripts
                    .map(item => collectDependenceTargets(item, dstPath)))
                ).flat(1).map(calcRelativePath)

                return pug.render(content, {
                  pretty: true,
                  data: {
                    title: `${ page.name } | ${ manifest.name }`,
                    sharedStyles: paths._shared.styles.map(item => calcRelativePath(item.dest)),
                    sharedScripts: paths._shared.scripts.map(item => calcRelativePath(item.dest)),
                    sharedThirdPartyStyles,
                    sharedThirdPartyScripts,
                    styles: page.styles.map(item => calcRelativePath(item.dest)),
                    scripts: page.scripts.map(item => calcRelativePath(item.dest)),
                    thirdPartyStyles,
                    thirdPartyScripts,
                  }
                })
              },
            }
          })
        ),
      ].filter(Boolean)
    }),
  ],
}


const config = [
  ...styleConfigs,
  ...scriptConfigs,
  resourceConfig,
].filter(Boolean)


export default config
